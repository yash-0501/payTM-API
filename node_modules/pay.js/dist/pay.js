(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.Pay = factory());
}(this, function () { 'use strict';

  var babelHelpers = {};

  babelHelpers.classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  babelHelpers.createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  babelHelpers.inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  babelHelpers.possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  babelHelpers;

  var TaxBandCalculator = function () {

      /**
       * Instantiate the Class
       *
       * @param  {Object}  options
       */

      function TaxBandCalculator(options) {
          babelHelpers.classCallCheck(this, TaxBandCalculator);

          this.opts = options;
      }

      /**
       * Get the gross annual income
       *
       * @return  {Number}
       */


      babelHelpers.createClass(TaxBandCalculator, [{
          key: 'getTotalTaxable',


          /**
           * Get the total taxable amount from the gross amount.
           * Defaults to the total gross amount.
           *
           * @return {Number}
           */
          value: function getTotalTaxable() {
              return this.gross;
          }

          /**
           * Calculate how much tax is to be paid for a particular tax band
           *
           * @param  {Number}  amount
           * @param  {Object}  band
           *
           * @return {Number}
           */

      }, {
          key: 'calculateTaxForBand',
          value: function calculateTaxForBand(amount, band) {
              if (amount < band.min) return 0;

              // return the flat rate if one is set
              if (typeof band.flat !== 'undefined') return band.rate;

              return (amount - band.min) * band.rate;
          }

          /**
           * Calculate the amount of annual Tax given the gross income
           *
           * @return {Number}
           */

      }, {
          key: 'calculateAnnual',
          value: function calculateAnnual() {
              var total = 0,
                  taxable = this.getTotalTaxable();

              for (var i = this.opts.bands.length - 1; i >= 0; i--) {
                  var band = this.opts.bands[i],
                      amount = this.calculateTaxForBand(taxable, band);

                  total += amount;

                  if (amount > 0) taxable = band.min;
              }

              return total;
          }

          /**
           * Calculate the amount of monthly Tax given the gross income
           *
           * @return  {Number}
           */

      }, {
          key: 'calculateMonthly',
          value: function calculateMonthly() {
              return this.calculateAnnual() / 12;
          }
      }, {
          key: 'gross',
          get: function get() {
              return this.opts.gross;
          }

          /**
           * Get the gross annual income
           *
           * @param  {Number}  amount
           */
          ,
          set: function set(amount) {
              this.opts.gross = amount;
          }

          /**
           * Get the net annual income
           *
           * @return  {Number}
           */

      }, {
          key: 'net',
          get: function get() {
              return this.gross - this.calculateAnnual();
          }
      }]);
      return TaxBandCalculator;
  }();

  var IncomeTaxCalculator = function (_TaxBandCalculator) {
      babelHelpers.inherits(IncomeTaxCalculator, _TaxBandCalculator);

      function IncomeTaxCalculator(gross, data) {
          babelHelpers.classCallCheck(this, IncomeTaxCalculator);

          var _this = babelHelpers.possibleConstructorReturn(this, Object.getPrototypeOf(IncomeTaxCalculator).call(this, { gross: gross, bands: data.INCOME_TAX_BANDS }));

          _this.gross = gross;
          _this.data = data;
          return _this;
      }

      /**
       * Override the total taxable amount for income tax specifically
       *
       * @return {Number}
       */


      babelHelpers.createClass(IncomeTaxCalculator, [{
          key: 'getTotalTaxable',
          value: function getTotalTaxable() {
              if (this.gross < this.data.TAX_FREE_ALLOWANCE_LIMIT) {
                  var taxable = this.gross - this.data.TAX_FREE_ALLOWANCE;

                  return taxable < 0 ? 0 : taxable;
              } else if (this.gross < this.data.TAX_FREE_ALLOWANCE_UPPER_LIMIT) {
                  var amountOver = this.gross - this.data.TAX_FREE_ALLOWANCE_LIMIT,
                      adjustedTFA = this.data.TAX_FREE_ALLOWANCE - amountOver * this.data.TAX_FREE_ALLOWANCE_LIMIT_RATE;

                  return this.gross - adjustedTFA;
              }

              return this.gross;
          }
      }]);
      return IncomeTaxCalculator;
  }(TaxBandCalculator);

  var NationalInsuranceCalculator = function (_TaxBandCalculator) {
      babelHelpers.inherits(NationalInsuranceCalculator, _TaxBandCalculator);

      function NationalInsuranceCalculator(gross) {
          var selfEmployed = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
          var data = arguments[2];
          babelHelpers.classCallCheck(this, NationalInsuranceCalculator);

          var _this = babelHelpers.possibleConstructorReturn(this, Object.getPrototypeOf(NationalInsuranceCalculator).call(this, { gross: gross, bands: selfEmployed ? data.NI_BANDS_SE : data.NI_BANDS }));

          _this.gross = gross;
          return _this;
      }

      return NationalInsuranceCalculator;
  }(TaxBandCalculator);

  var incomeTaxData = {

    /**
     * The value that can be earned before paying any tax
     *
     * @type {Integer}
     */
    TAX_FREE_ALLOWANCE: 10600,

    /**
     * The amount at which the tax free allowance is reduced
     *
     * @type {Integer}
     */
    TAX_FREE_ALLOWANCE_LIMIT: 100000,

    /**
     * The amount at which the tax free allowance is removed
     *
     * @type {Integer}
     */
    TAX_FREE_ALLOWANCE_UPPER_LIMIT: 121200,

    /**
     * The rate to apply to the tax free allowance when it reaches the
     * threshold
     *
     * @type {Number}
     */
    TAX_FREE_ALLOWANCE_LIMIT_RATE: 0.5,

    /**
     * The various tax bands
     *
     * @type {Array}
     */
    INCOME_TAX_BANDS: [{ min: 0, rate: 0.2 }, // Basic rate
    { min: 31786, rate: 0.4 }, // Higher Rate
    { min: 150000, rate: 0.45 } // Additional Rate
    ]
  };

  var nationalInsuranceData = {

      /**
       * Define the rates for Class 1 contributions
       *
       * @type {Array}
       */
      NI_BANDS: [{ min: 0, rate: 0 }, { min: 8060, rate: 0.12 }, { min: 42386, rate: 0.02 }],

      /**
       * Define the rates for Class 2 and 4 contributions
       *
       * @type {Array}
       */
      NI_BANDS_SE: [{ min: 0, rate: 0 }, { min: 5965, rate: 145.6, flat: true }, // Class 2 flat rate
      { min: 8060, rate: 0.09 }, // Class 4 onwards
      { min: 42386, rate: 0.02 }]
  };

  var data = {
      incomeTaxData: incomeTaxData,
      nationalInsuranceData: nationalInsuranceData
  };

  var Tax = function () {
      function Tax(amount) {
          babelHelpers.classCallCheck(this, Tax);

          this.amount = amount;
      }

      babelHelpers.createClass(Tax, [{
          key: 'incomeTax',
          value: function incomeTax() {
              return new IncomeTaxCalculator(this.amount, data.incomeTaxData);
          }
      }, {
          key: 'nationalInsurance',
          value: function nationalInsurance() {
              var selfEmployed = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

              return new NationalInsuranceCalculator(this.amount, selfEmployed, data.nationalInsuranceData);
          }
      }]);
      return Tax;
  }();

  var Pay = function () {
      function Pay() {
          babelHelpers.classCallCheck(this, Pay);
      }

      babelHelpers.createClass(Pay, null, [{
          key: 'tax',
          value: function tax(options) {
              return new Tax(options);
          }
      }]);
      return Pay;
  }();

  return Pay;

}));
//# sourceMappingURL=pay.js.map